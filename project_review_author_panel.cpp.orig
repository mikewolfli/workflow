#include "project_review_author_panel.h"
#include "wfApp.h"
#include "utils/wf_operator.h"

//(*InternalHeaders(project_review_author_panel)
#include <wx/intl.h>
#include <wx/string.h>
//*)

//(*IdInit(project_review_author_panel)
const long project_review_author_panel::ID_BUTTON_AUTHOR = wxNewId();
const long project_review_author_panel::ID_BUTTON_RETURN = wxNewId();
const long project_review_author_panel::ID_BUTTON_FEEDBACK = wxNewId();
const long project_review_author_panel::ID_BUTTON_REFRESH = wxNewId();
const long project_review_author_panel::ID_BUTTON_GROUP = wxNewId();
const long project_review_author_panel::ID_LISTVIEW_PERSON = wxNewId();
const long project_review_author_panel::idMenu_Expand = wxNewId();
const long project_review_author_panel::idMenu_Collapse = wxNewId();
const long project_review_author_panel::idMenu_All = wxNewId();
const long project_review_author_panel::idMenu_Author = wxNewId();
const long project_review_author_panel::idMenu_Review = wxNewId();
const long project_review_author_panel::idMenu_Check = wxNewId();
const long project_review_author_panel::idMenu_NoCheck = wxNewId();
const long project_review_author_panel::idMenu_Cancel = wxNewId();
const long project_review_author_panel::idMenu_filter = wxNewId();
//*)
const long project_review_author_panel::ID_TREELISTCTRL_TASK_LIST = wxNewId();
const long project_review_author_panel::ID_TREELISTCTRL_GROUP_TASK_LIST = wxNewId();

BEGIN_EVENT_TABLE(project_review_author_panel, wxPanel)
    //(*EventTable(project_review_author_panel)
    //*)
END_EVENT_TABLE()

project_review_author_panel::project_review_author_panel(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size)
{
    //(*Initialize(project_review_author_panel)
    wxStaticBoxSizer* sbox_author;
    wxGridBagSizer* GridBagSizer1;
    wxBoxSizer* BoxSizer2;
    wxBoxSizer* BoxSizer1;
    wxStaticBoxSizer* sb_group;
    wxStaticBoxSizer* StaticBoxSizer1;

    Create(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL, _T("wxID_ANY"));
    BoxSizer1 = new wxBoxSizer(wxVERTICAL);
    GridBagSizer1 = new wxGridBagSizer(0, 0);
    sbox_author = new wxStaticBoxSizer(wxHORIZONTAL, this, _("待授权任务清单"));
    GridBagSizer1->Add(sbox_author, wxGBPosition(0, 0), wxGBSpan(6, 6), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    BoxSizer2 = new wxBoxSizer(wxVERTICAL);
    Button_Author = new wxButton(this, ID_BUTTON_AUTHOR, _("授权/评审/审核"), wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, _T("ID_BUTTON_AUTHOR"));
    BoxSizer2->Add(Button_Author, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    Button_RETURN = new wxButton(this, ID_BUTTON_RETURN, _("任务退回"), wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, _T("ID_BUTTON_RETURN"));
    BoxSizer2->Add(Button_RETURN, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    Button_Feedback = new wxButton(this, ID_BUTTON_FEEDBACK, _("问题反馈"), wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, _T("ID_BUTTON_FEEDBACK"));
    BoxSizer2->Add(Button_Feedback, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    Button_REFRESH = new wxButton(this, ID_BUTTON_REFRESH, _("刷新任务列表"), wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, _T("ID_BUTTON_REFRESH"));
    BoxSizer2->Add(Button_REFRESH, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    button_group = new wxButton(this, ID_BUTTON_GROUP, _("组员评审任务(全显)"), wxDefaultPosition, wxDefaultSize, 0, wxDefaultValidator, _T("ID_BUTTON_GROUP"));
    BoxSizer2->Add(button_group, 1, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
    GridBagSizer1->Add(BoxSizer2, wxGBPosition(0, 6), wxDefaultSpan, wxALL|wxALIGN_TOP|wxALIGN_CENTER_HORIZONTAL, 0);
    StaticBoxSizer1 = new wxStaticBoxSizer(wxHORIZONTAL, this, _("组员列表"));
    lv_person = new wxListView(this, ID_LISTVIEW_PERSON, wxDefaultPosition, wxSize(185,224), wxLC_REPORT, wxDefaultValidator, _T("ID_LISTVIEW_PERSON"));
    StaticBoxSizer1->Add(lv_person, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    GridBagSizer1->Add(StaticBoxSizer1, wxGBPosition(0, 7), wxGBSpan(6, 2), wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    BoxSizer1->Add(GridBagSizer1, 2, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    sb_group = new wxStaticBoxSizer(wxHORIZONTAL, this, _("组员任务清单"));
    BoxSizer1->Add(sb_group, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0);
    SetSizer(BoxSizer1);
    mi_expand = new wxMenuItem((&menu_author), idMenu_Expand, _("全部展开(&E)"), _("项目展开"), wxITEM_NORMAL);
    menu_author.Append(mi_expand);
    mi_collapse = new wxMenuItem((&menu_author), idMenu_Collapse, _("全部收起(&C)"), _("项目收起"), wxITEM_NORMAL);
    menu_author.Append(mi_collapse);
    menu_author.AppendSeparator();
    mi_show_all = new wxMenuItem((&menu_author), idMenu_All, _("显示全部任务(&A)"), _("显示全部任务"), wxITEM_CHECK);
    menu_author.Append(mi_show_all);
    mi_show_all->Check(true);
    mi_show_author = new wxMenuItem((&menu_author), idMenu_Author, _("仅显示待授权(&W)"), _("仅显示待授权"), wxITEM_CHECK);
    menu_author.Append(mi_show_author);
    mi_review = new wxMenuItem((&menu_author), idMenu_Review, _("仅显示待评审(&R)"), _("仅显示待评审项目"), wxITEM_CHECK);
    menu_author.Append(mi_review);
    mi_check = new wxMenuItem((&menu_author), idMenu_Check, _("仅显示待审核(&H)"), _("仅显示待审核项目"), wxITEM_CHECK);
    menu_author.Append(mi_check);
    menu_author.Break();
    mi_no_check = new wxMenuItem((&menu_check), idMenu_NoCheck, _("免审设置(&N)"), _("免审设置"), wxITEM_NORMAL);
    menu_check.Append(mi_no_check);
    mi_cancel_no_check = new wxMenuItem((&menu_check), idMenu_Cancel, _("取消免审(&C)"), _("取消免审"), wxITEM_NORMAL);
    menu_check.Append(mi_cancel_no_check);
    menu_filter.AppendSeparator();
    mi_filter = new wxMenuItem((&menu_filter), idMenu_filter, _("按组员筛选(&F)"), _("按组员筛选显示项目"), wxITEM_NORMAL);
    menu_filter.Append(mi_filter);
    menu_filter.Break();
    BoxSizer1->Fit(this);
    BoxSizer1->SetSizeHints(this);

    Connect(ID_BUTTON_AUTHOR,wxEVT_COMMAND_BUTTON_CLICKED,(wxObjectEventFunction)&project_review_author_panel::OnButton_AuthorClick);
    Connect(ID_BUTTON_RETURN,wxEVT_COMMAND_BUTTON_CLICKED,(wxObjectEventFunction)&project_review_author_panel::OnButton_RETURNClick);
    Connect(ID_BUTTON_FEEDBACK,wxEVT_COMMAND_BUTTON_CLICKED,(wxObjectEventFunction)&project_review_author_panel::OnButton_FeedbackClick);
    Connect(ID_BUTTON_REFRESH,wxEVT_COMMAND_BUTTON_CLICKED,(wxObjectEventFunction)&project_review_author_panel::OnButton_REFRESHClick);
    Connect(ID_BUTTON_GROUP,wxEVT_COMMAND_BUTTON_CLICKED,(wxObjectEventFunction)&project_review_author_panel::Onbutton_groupClick);
    Connect(ID_LISTVIEW_PERSON,wxEVT_COMMAND_LIST_ITEM_ACTIVATED,(wxObjectEventFunction)&project_review_author_panel::Onlv_personItemActivated);
    Connect(ID_LISTVIEW_PERSON,wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK,(wxObjectEventFunction)&project_review_author_panel::Onlv_personItemRClick);
    Connect(idMenu_Expand,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&project_review_author_panel::Onmi_expandSelected);
    Connect(idMenu_Collapse,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&project_review_author_panel::Onmi_collapseSelected);
    Connect(idMenu_All,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&project_review_author_panel::Onmi_show_allSelected);
    Connect(idMenu_Author,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&project_review_author_panel::Onmi_show_authorSelected);
    Connect(idMenu_Review,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&project_review_author_panel::Onmi_reviewSelected);
    Connect(idMenu_Check,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&project_review_author_panel::Onmi_checkSelected);
    Connect(idMenu_NoCheck,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&project_review_author_panel::Onmi_no_checkSelected);
    Connect(idMenu_Cancel,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&project_review_author_panel::Onmi_cancel_no_checkSelected);
    Connect(idMenu_filter,wxEVT_COMMAND_MENU_SELECTED,(wxObjectEventFunction)&project_review_author_panel::Onmi_filterSelected);
    //*)
    init_list_header();
    refresh_res_list();
    GridBagSizer1->AddGrowableCol(5);
//   GridBagSizer1->AddGrowableCol(7);
    GridBagSizer1->AddGrowableRow(4);
    BuildDataViewCtrl();
    sbox_author->Add(tlc_task_list, 1, wxALL | wxEXPAND | wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL, 0);
    sb_group->Add(tlc_group_task_list, 1, wxALL | wxEXPAND | wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL, 0);
    Layout();
    Connect(ID_TREELISTCTRL_TASK_LIST, wxEVT_TREE_ITEM_RIGHT_CLICK, (wxObjectEventFunction)&project_review_author_panel::OnTaskListRightClick);
    wxString str = wxT(" operator_id = '") + gr_para.login_user + wxT("' and is_active = true and (action_id = 'AT00000002' OR action_id ='AT00000025' OR action_id='AT00000026') ");
    set_clause(str);
    refresh_list();
    str = wxT(" is_active = true and (action_id = 'AT00000025' or action_id = 'AT00000026') ");
    set_group_clause(str);
    refresh_group_list();
}

project_review_author_panel::~project_review_author_panel()
{
    //(*Destroy(project_review_author_panel)
    //*)
}

void project_review_author_panel::BuildDataViewCtrl()
{
    tlc_task_list = new wxcode::wxTreeListCtrl(this, ID_TREELISTCTRL_TASK_LIST ,
            wxDefaultPosition, wxDefaultSize,
            wxTR_DEFAULT_STYLE | wxTR_COLUMN_LINES | wxTR_HIDE_ROOT | wxTR_ROW_LINES | wxTR_MULTIPLE | wxTR_FULL_ROW_HIGHLIGHT);
    tlc_task_list->AddColumn(_("项目信息"), 300, wxALIGN_LEFT, -1, true, false); //0
    tlc_task_list->AddColumn(_("任务ID"), 0, wxALIGN_LEFT, -1, false, false); //1
    tlc_task_list->AddColumn(_("台数"), 50, wxALIGN_LEFT, -1, true, false); //2
    tlc_task_list->AddColumn(_("要求完成日期"), 100, wxALIGN_LEFT, -1, true, false); //3
    tlc_task_list->AddColumn(_("合同负责ID"), 0, wxALIGN_LEFT, -1, false, false); //4
    tlc_task_list->AddColumn(_("合同负责"), 100, wxALIGN_LEFT, -1, true, false); //5
    tlc_task_list->AddColumn(_("评审负责ID"), 0, wxALIGN_LEFT, -1, false, false); //6
    tlc_task_list->AddColumn(_("评审负责"), 100, wxALIGN_LEFT, -1, true, false); //7
    tlc_task_list->AddColumn(_("分公司id"), 0, wxALIGN_LEFT, -1, false, false); //8
    tlc_task_list->AddColumn(_("分公司"), 100, wxALIGN_LEFT, -1, true, false); //9
    tlc_task_list->AddColumn(_("status"), 50, wxALIGN_LEFT, -1, true, false); //10
    tlc_task_list->AddColumn(_("任务状态"), 70, wxALIGN_LEFT, -1, true, false); //11
    tlc_task_list->AddColumn(_("action_id"), 0, wxALIGN_LEFT, -1, false, false); //12
    tlc_task_list->AddColumn(_("交流status"), 0, wxALIGN_LEFT, -1, false, false); //13
    tlc_task_list->AddColumn(_("交流状态"), 200, wxALIGN_LEFT, -1, true, false); //14
    tlc_task_list->AddColumn(_("flow_ser"),0, wxALIGN_LEFT, -1, false, false); //15
    tlc_task_list->AddRoot(_("评审任务"));


    tlc_group_task_list = new wxcode::wxTreeListCtrl(this, ID_TREELISTCTRL_TASK_LIST ,
            wxDefaultPosition, wxDefaultSize,
            wxTR_DEFAULT_STYLE | wxTR_COLUMN_LINES | wxTR_HIDE_ROOT | wxTR_ROW_LINES | wxTR_MULTIPLE | wxTR_FULL_ROW_HIGHLIGHT);
    tlc_group_task_list->AddColumn(_("项目信息"), 300, wxALIGN_LEFT, -1, true, false); //0
    tlc_group_task_list->AddColumn(_("任务ID"), 0, wxALIGN_LEFT, -1, false, false); //1
    tlc_group_task_list->AddColumn(_("台数"), 50, wxALIGN_LEFT, -1, true, false); //2
    tlc_group_task_list->AddColumn(_("要求完成日期"), 100, wxALIGN_LEFT, -1, true, false); //3
    tlc_group_task_list->AddColumn(_("合同负责ID"), 0, wxALIGN_LEFT, -1, false, false); //4
    tlc_group_task_list->AddColumn(_("合同负责"), 100, wxALIGN_LEFT, -1, true, false); //5
    tlc_group_task_list->AddColumn(_("评审负责ID"), 0, wxALIGN_LEFT, -1, false, false); //6
    tlc_group_task_list->AddColumn(_("评审负责"), 100, wxALIGN_LEFT, -1, true, false); //7
    tlc_group_task_list->AddColumn(_("分公司id"), 0, wxALIGN_LEFT, -1, false, false); //8
    tlc_group_task_list->AddColumn(_("分公司"), 100, wxALIGN_LEFT, -1, true, false); //9
    tlc_group_task_list->AddColumn(_("status"), 50, wxALIGN_LEFT, -1, true, false); //10
    tlc_group_task_list->AddColumn(_("任务状态"), 70, wxALIGN_LEFT, -1, true, false); //11
    tlc_group_task_list->AddColumn(_("action_id"), 0, wxALIGN_LEFT, -1, false, false); //12
    tlc_group_task_list->AddColumn(_("交流status"), 0, wxALIGN_LEFT, -1, false, false); //13
    tlc_group_task_list->AddColumn(_("交流状态"), 200, wxALIGN_LEFT, -1, true, false); //14
    tlc_group_task_list->AddRoot(_("评审任务"));
}

void project_review_author_panel::init_list_header()
{
    wxListItem itemCol;
    itemCol.SetText(_("工程师ID"));
    itemCol.SetImage(-1);
    itemCol.SetWidth(0);
    lv_person->InsertColumn(0, itemCol);
    itemCol.SetText(_("评审工程师"));
    itemCol.SetImage(-1);
    itemCol.SetWidth(80);
    lv_person->InsertColumn(1, itemCol);
    itemCol.SetText(_("分配任务数"));
    itemCol.SetImage(-1);
    itemCol.SetWidth(80);
    lv_person->InsertColumn(2, itemCol);
    itemCol.SetText(_("是否免审"));
    itemCol.SetImage(-1);
    itemCol.SetWidth(80);
    lv_person->InsertColumn(3, itemCol);
}

void project_review_author_panel::refresh_res_list()
{
    lv_person->DeleteAllItems();
    wxString strSql = wxT("SELECT employee_id, name , (select count(*) from l_proc_act \
                          where operator_id = employee_id AND is_active=true AND action_id = 'AT00000025') AS task_qty, \
                          group_id, no_check FROM v_group_member WHERE group_id = 'G0002' AND plant = '") + gr_para.plant + wxT("' ORDER BY employee_id ASC;");
    wxPostgreSQLresult* _res = wxGetApp().app_sql_select(strSql);
    if (_res->Status() != PGRES_TUPLES_OK)
    {
        _res->Clear();
        return;
    }
    int irow = _res->GetRowsNumber();
    _res->MoveFirst();
    for (int i = 0; i < irow; i++)
    {
        wxString str = _res->GetVal(wxT("employee_id"));
        long tmp = lv_person->InsertItem(i, str);
        lv_person->SetItemData(tmp, i);
        str = _res->GetVal(wxT("name"));
        lv_person->SetItem(tmp, 1, str);
        str = _res->GetVal(wxT("task_qty"));
        lv_person->SetItem(tmp, 2, str);
        str = BoolToY(_res->GetBool(wxT("no_check")));
        lv_person->SetItem(tmp, 3, str);
        _res->MoveNext();
    }
    _res->Clear();
}

void project_review_author_panel::OnButton_AuthorClick(wxCommandEvent& event)
{
    if (!gr_para.login_status)
    {
        wxLogMessage(_("尚未登陆,无法做任何操作!"));
        return;
    }
    if (!wxGetApp().conn->IsAlive())
    {
        wxLogMessage(_("系统连接已断开,请重新连接!"));
        wxGetApp().clear_login();
        return;
    }

    wxArrayString array_group = wxGetApp().get_group();

    if(array_group.Index(wxT("G0002"))==wxNOT_FOUND)
    {
        return;
    }

    wxArrayTreeItemIds items;
    wxTreeItemId root = tlc_proj_list->GetRootItem();

    wxArrayTreeItemIds::iterator iter;
    tlc_task_list->GetSelections( items );

    if(items.IsEmpty())
    {
        wxLogMessage(_("请选择项目！"));
        return;
    }

    wxString s_task_id, s_operator, s_group, s_action_id;

    if(wxMessageBox(_("所选项目确认已经完成？")+s_res,_("完成确认："),wxOK|wxCANCEL,this)==wxCANCEL)
    {
        return;
    }

    v_wf_action * t_template=0;

    wf_operator * wf_active=0;

    v_wf_instance now_step, next_step;


    wxLongLong mils_used, start_mils;

    t_template = get_template_action(wf_str_review);
    for( iter = items.begin(); iter<items.end(); iter++)
    {
        wxTreeItemId sel_item = *iter;
        if(tlc_task_list->GetItemParent(sel_item)==root&&sel_item.IsOk())
        {
            s_action_id = tlc_task_list->GetItemText(sel_item, 12);

            if(s_action_id == wxT("AT00000002"))
            {
                long l_item = -1;
                l_item = lv_person->GetNextItem(l_item,  wxLIST_NEXT_ALL,  wxLIST_STATE_SELECTED);

                if(l_item == -1)
                {
                    wxLogMessage(_("请选择操作人员！"));
                    delete [] t_template;
                    return;
                }
                else
                {
                    s_operator = lv_person->GetItemText(l_item, 0);
                    s_group = wxT("G0002");
                }

                start_mils = wxGetLocalTimeMillis();//事件处理事件统计，起始点。

                s_task_id = tlc_task_list->GetItemText(sel_item, 0);

                wf_active = new wf_operator(s_task_id, wf_str_review, t_template);
                wf_active->Pass_proc(s_operator, s_group, wxEmptyString, true);

                if(wf_active->update_instance_one2several(1))
                {
                    i_status = wf_active->get_instance_status(s_wf_status);
                    update_review_status(array_task_units,i_status,s_wf_status);
                    wxLogMessage(_("项目:")+str_head+_("任务:")+str_task_id+_("授权成功!"));
                }

                delete wf_active;
//       b_first = true;

                mils_used = wxGetLocalTimeMillis() - start_mils;

                wxLogMessage(s_task_id+_("任务完成!  耗时:")+NumToStr(mils_used)+_("毫秒")); //事件处理事件统计，截止点。

                tlc_task_list->DeleteChildren(sel_item);
                tlc_task_list->Delete(sel_item);

            }
        }
    }

    delete [] t_template;
}

void project_review_author_panel::OnButton_RETURNClick(wxCommandEvent& event)
{

    if(!gr_para.login_status)
    {
        wxLogMessage(_("尚未登陆,不能进行任何操作!"));
        return;
    }

    wxArrayTreeItemIds items;
    wxTreeItemId root = tlc_task_list->GetRootItem();

    wxArrayTreeItemIds::iterator iter;
    tlc_task_list->GetSelections( items );
    if(items.IsEmpty())
    {
        wxLogMessage(_("尚未选择项目，无法后续操作!"));
        return;
    }

    wxString aim_step;
    v_wf_action * t_template=0;
    wf_operator * wf_active;

    wxTextEntryDialog tdlg(this,_("退回提示输入:"),_("确认退回？"),wxT(""),wxOK | wxCANCEL | wxTE_MULTILINE,wxDefaultPosition );
    wxString str_desc;
    if(tdlg.ShowModal()== wxID_OK)
    {
        str_desc= tdlg.GetValue();
    }
    else return;

    wxLongLong mils_used, start_mils;
    wxString str_task_id, str_workflow_id, str_flow_ser,str_head;
    wxArrayString array_steps,array_task_units;

    t_template = get_template_action(wf_str_review);

    int i_count =0;
    int i_status;
    wxString s_wf_status;

    for( iter = items.begin(); iter<items.end(); iter++)
    {
        wxTreeItemId sel_item = *iter;
        if(tlc_task_list->GetItemParent(sel_item)==root&&sel_item.IsOk())
        {
            i_count++;
            str_task_id = tlc_task_list->GetItemText(sel_item, 1);
            str_workflow_id = wf_str_review;
            str_flow_ser = tlc_task_list->GetItemText(sel_item, 15);
            str_head = tlc_task_list->GetItemText(sel_item, 0);

            array_steps = get_steps_info(str_task_id, str_workflow_id, str_flow_ser);

            if(array_steps.IsEmpty())
            {
                wxLogMessage(_("初始步骤无法退回!"));
                return;
            }

            wxSingleChoiceDialog cdlg(this, _("请选择退回到哪一步"),_("退回选择"),array_steps);

            if(cdlg.ShowModal() == wxID_OK)
            {
                int i_sel = cdlg.GetSelection();
                aim_step = m_steps.Item(i_sel).Left(10);
            }
            else return;


            start_mils = wxGetLocalTimeMillis();
            wf_active = new wf_operator(str_task_id, str_workflow_id, t_template);
            wf_active->Feed_back(str_desc, aim_step);

            if(wf_active->update_instance_one2several(1))
            {
                i_status = wf_active->get_instance_status(s_wf_status);
                update_review_status(array_task_units,i_status,s_wf_status);
                wxLogMessage(_("项目:")+str_head+_("退回评审任务:")+str_task_id+_("成功!"));
            }

            array_task_units.Clear();

            delete wf_active;


            mils_used = wxGetLocalTimeMillis() - start_mils;

            wxLogMessage(str_task_id+_("任务完成!  耗时:")+NumToStr(mils_used)+_("毫秒"));

            tlc_task_list->DeleteChildren(sel_item);
            tlc_task_list->Delete(sel_item);
        }
    }

    delete [] t_template;

}

bool project_review_author_panel::update_review_status(const wxArrayString &array_units, int i_status, wxString s_wf_status)
{
     int i_count = array_units.GetCount();
     if(i_count ==0)
        return false;

     wxString str_sql = wxT("UPDATE s_unit_info SET status =")+NumToStr(i_status)+wxT(",wf_status='")+s_wf_status+wxT("',modify_date = '")+DateToAnsiStr(wxDateTime::Now())+
                               wxT("',modify_emp_id = '")+gr_para.login_user+wxT("' WHERE ");

    for(int i=0;i<i_count;i++)
    {
        if(i==i_count-1)
        {
            str_sql = str_sql + wxT(" wbs_no ='")+array_units.Item(i)+wxT("';");
        }else
        {
            str_sql = str_sql + wxT(" wbs_no ='")+array_units.Item(i)+wxT("' OR ");
        }
    }

    return wxGetApp().app_sql_update(str_sql);
}

wxArrayString project_review_author_panel::get_steps_info(wxString &s_instance_id, wxString &s_workflow_id, wxString &s_now)
{
    wxString strSql = wxT("select concat(action_id,'-',operator_id) as action_id, concat(action_name,'-', name) as step_info from v_task_list4_att where workflow_id = '")+
                   s_workflow_id+wxT("' and instance_id = '")+ s_instance_id+wxT("' and flow_ser < ")+ s_now+wxT(" order by flow_ser ASC;");

//    wxLogMessage(strSql);
    wxPostgreSQLresult* _res =  wxGetApp().app_sql_select(strSql);

    wxArrayString array_result;
    if(_res->Status()!= PGRES_TUPLES_OK)
    {
        _res->Clear();
        return array_result;
    }

    int i_count = _res->GetRowsNumber();
    m_steps.Clear();

    wxString str;

    _res->MoveFirst();
    for(int i=0;i<i_count;i++)
    {
        str = _res->GetVal(wxT("action_id"));
        m_steps.Add(str);

        str = _res->GetVal(wxT("step_info"));
        array_result.Add(str);

        _res->MoveNext();
    }
    _res->Clear();

    return array_result;
}

void project_review_author_panel::OnButton_REFRESHClick(wxCommandEvent& event)
{
    refresh_list();
    refresh_group_list();
}

void project_review_author_panel::refresh_list()
{
    if (!gr_para.login_status)
    {
        wxLogMessage(_("尚未登陆,无法做任何操作!"));
        return;
    }
    if (!wxGetApp().conn->IsAlive())
    {
        wxLogMessage(_("系统连接已断开,请重新连接!"));
        wxGetApp().clear_login();
        return;
    }
    wxArrayString array_group = wxGetApp().get_group();
    if (array_group.Index(wxT("G0002")) == wxNOT_FOUND)
        return;
    wxTreeItemId root = tlc_task_list->GetRootItem();
    tlc_task_list->DeleteChildren(root);
    wxString str_sql = wxT("SELECT review_task_id,contract_id,project_name,project_id,require_review_date,res_cm,\
                           (select name from s_employee where employee_id = res_cm) as res_cm_person,review_engineer, \
                           (select name from s_employee where employee_id = review_engineer) as review_engineer_name, branch_id,\
                           (select branch_name_cn from s_branch_info where branch_id = v_task_list4.branch_id) as branch_name,status, wf_status, action_id, wbs_no,lift_no,\
                           elevator_type,project_catalog,flow_ser FROM v_task_list4 WHERE ") + cl_clause + wxT(" ORDER BY review_task_id, wbs_no ASC;");
    wxPostgreSQLresult* _res = wxGetApp().app_sql_select(str_sql);
    if (_res->Status() != PGRES_TUPLES_OK)
    {
        _res->Clear();
        return;
    }
    int i_count = _res->GetRowsNumber();
    _res->MoveFirst();
    wxString s_review_task_id, str;
    wxTreeItemId branch_item, leaf_item;
    for (int i = 0; i < i_count; i++)
    {
        if (s_review_task_id != _res->GetVal(wxT("review_task_id")))
        {
            str = _res->GetVal(wxT("contract_id")) + _res->GetVal(wxT("project_name")) + wxT("-") + _res->GetVal(wxT("project_id"));
            s_review_task_id = _res->GetVal(wxT("review_task_id"));
            branch_item = tlc_task_list->AppendItem(root, str);
            tlc_task_list->SetItemText(branch_item, 1, s_review_task_id);
            str = DateToStrFormat(_res->GetDateTime(wxT("require_review_date")));
            tlc_task_list->SetItemText(branch_item, 3, str);
            str = _res->GetVal(wxT("res_cm"));
            tlc_task_list->SetItemText(branch_item, 4, str);
            str = _res->GetVal(wxT("res_cm_person"));
            tlc_task_list->SetItemText(branch_item, 5, str);
            str = _res->GetVal(wxT("review_engineer"));
            tlc_task_list->SetItemText(branch_item, 6, str);
            str = _res->GetVal(wxT("review_engineer_name"));
            tlc_task_list->SetItemText(branch_item, 7, str);
            str = _res->GetVal(wxT("branch_id"));
            tlc_task_list->SetItemText(branch_item, 8, str);
            str = _res->GetVal(wxT("branch_name"));
            tlc_task_list->SetItemText(branch_item, 9, str);
            str = prj_status_to_str(_res->GetInt(wxT("status")));
            tlc_task_list->SetItemText(branch_item, 10, str);
            str = _res->GetVal(wxT("wf_status"));
            tlc_task_list->SetItemText(branch_item, 11, str);
            str = _res->GetVal(wxT("action_id"));
            tlc_task_list->SetItemText(branch_item, 12, str);
            str = _res->GetVal(wxT("flow_ser"));
            tlc_task_list->SetItemText(branch_item, 15, str);
        }
        str = _res->GetVal(wxT("wbs_no"));
        leaf_item = tlc_task_list->AppendItem(branch_item, str, -1, -1);
        tlc_task_list->SetItemText(leaf_item, 1, s_review_task_id);
        str = _res->GetVal(wxT("lift_no"));
        tlc_task_list->SetItemText(leaf_item, 2, str);
        str = _res->GetVal(wxT("elevator_type"));
        tlc_task_list->SetItemText(leaf_item, 3, str);
        str = prj_catalog_to_str(_res->GetInt(wxT("project_catalog")));
        tlc_task_list->SetItemText(leaf_item, 5, str);
        _res->MoveNext();
    }
    _res->Clear();
    refresh_level();
}

void project_review_author_panel::refresh_level()
{
    wxTreeItemId root = tlc_task_list->GetRootItem();
    wxTreeItemIdValue cookie;
    wxTreeItemId item = tlc_task_list->GetFirstChild(root, cookie);
    while (item.IsOk())
    {
        wxTreeItemIdValue cookie_child;
        wxTreeItemId child_item = tlc_task_list->GetFirstChild(item, cookie_child);
        int i_count_leaf = tlc_task_list->GetChildrenCount(item);
        tlc_task_list->SetItemText(item, 2, NumToStr(i_count_leaf) + _("台"));
        item = tlc_task_list->GetNextSibling(item);
    }
}

void project_review_author_panel::refresh_group_list()
{
    wxTreeItemId root = tlc_group_task_list->GetRootItem();
    tlc_group_task_list->DeleteChildren(root);
    wxString str_sql = wxT("SELECT review_task_id,contract_id,project_name,project_id,require_review_date,res_cm,\
                           (select name from s_employee where employee_id = res_cm) as res_cm_person,operator_id, \
                           (select name from s_employee where employee_id = operator_id) as review_engineer, branch_id,\
                           (select branch_name_cn from s_branch_info where branch_id = v_task_list4.branch_id) as branch_name, status, wf_status, action_id, wbs_no,lift_no,\
                           elevator_type,project_catalog FROM v_task_list4 WHERE ") + cl_group_clause + wxT(" ORDER BY review_task_id, wbs_no ASC;");
    wxPostgreSQLresult* _res = wxGetApp().app_sql_select(str_sql);
    if (_res->Status() != PGRES_TUPLES_OK)
    {
        _res->Clear();
        return;
    }
    int i_count = _res->GetRowsNumber();
    _res->MoveFirst();
    wxString s_review_task_id, str;
    wxTreeItemId branch_item, leaf_item;
    for (int i = 0; i < i_count; i++)
    {
        if (s_review_task_id != _res->GetVal(wxT("review_task_id")))
        {
            str = _res->GetVal(wxT("contract_id")) + _res->GetVal(wxT("project_name")) + wxT("-") + _res->GetVal(wxT("project_id"));
            s_review_task_id = _res->GetVal(wxT("review_task_id"));
            branch_item = tlc_group_task_list->AppendItem(root, str);
            tlc_group_task_list->SetItemText(branch_item, 1, s_review_task_id);
            str = DateToStrFormat(_res->GetDateTime(wxT("require_review_date")));
            tlc_group_task_list->SetItemText(branch_item, 3, str);
            str = _res->GetVal(wxT("res_cm"));
            tlc_group_task_list->SetItemText(branch_item, 4, str);
            str = _res->GetVal(wxT("res_cm_person"));
            tlc_group_task_list->SetItemText(branch_item, 5, str);
            str = _res->GetVal(wxT("operator_id"));
            tlc_group_task_list->SetItemText(branch_item, 6, str);
            str = _res->GetVal(wxT("review_engineer"));
            tlc_group_task_list->SetItemText(branch_item, 7, str);
            str = _res->GetVal(wxT("branch_id"));
            tlc_group_task_list->SetItemText(branch_item, 8, str);
            str = _res->GetVal(wxT("branch_name"));
            tlc_group_task_list->SetItemText(branch_item, 9, str);
            str = prj_status_to_str(_res->GetInt(wxT("status")));
            tlc_group_task_list->SetItemText(branch_item, 10, str);
            str = _res->GetVal(wxT("wf_status"));
            tlc_group_task_list->SetItemText(branch_item, 11, str);
            str = _res->GetVal(wxT("action_id"));
            tlc_group_task_list->SetItemText(branch_item, 12, str);
        }
        str = _res->GetVal(wxT("wbs_no"));
        leaf_item = tlc_group_task_list->AppendItem(branch_item, str, -1, -1);
        tlc_group_task_list->SetItemText(leaf_item, 1, s_review_task_id);
        str = _res->GetVal(wxT("lift_no"));
        tlc_group_task_list->SetItemText(leaf_item, 2, str);
        str = _res->GetVal(wxT("elevator_type"));
        tlc_group_task_list->SetItemText(leaf_item, 3, str);
        str = prj_catalog_to_str(_res->GetInt(wxT("project_catalog")));
        tlc_group_task_list->SetItemText(leaf_item, 5, str);
        _res->MoveNext();
    }
    _res->Clear();
    refresh_group_level();
}

void project_review_author_panel::refresh_group_level()
{
    wxTreeItemId root = tlc_group_task_list->GetRootItem();
    wxTreeItemIdValue cookie;
    wxTreeItemId item = tlc_group_task_list->GetFirstChild(root, cookie);
    while (item.IsOk())
    {
        wxTreeItemIdValue cookie_child;
        wxTreeItemId child_item = tlc_group_task_list->GetFirstChild(item, cookie_child);
        int i_count_leaf = tlc_group_task_list->GetChildrenCount(item);
        tlc_group_task_list->SetItemText(item, 2, NumToStr(i_count_leaf) + _("台"));
        item = tlc_group_task_list->GetNextSibling(item);
    }
}

void project_review_author_panel::Onlv_personItemRClick(wxListEvent& event)
{
    PopupMenu(&menu_check, ScreenToClient(wxGetMousePosition()));
}

void project_review_author_panel::OnTaskListRightClick(wxTreeEvent& event)
{
    PopupMenu(&menu_author, ScreenToClient(wxGetMousePosition()));
}

void project_review_author_panel::Onmi_expandSelected(wxCommandEvent& event)
{
    wxTreeItemId root = tlc_task_list->GetRootItem();
    tlc_task_list->ExpandAll(root);
}

void project_review_author_panel::Onmi_collapseSelected(wxCommandEvent& event)
{
    wxTreeItemId root = tlc_task_list->GetRootItem();
    wxTreeItemIdValue cookie;
    wxTreeItemId item = tlc_task_list->GetFirstChild(root, cookie);
    while (item.IsOk())
    {
        tlc_task_list->Collapse(item);
        item = tlc_task_list->GetNextSibling(item);
    }
}

void project_review_author_panel::Onmi_show_allSelected(wxCommandEvent& event)
{
    if (!event.IsChecked())
    {
        mi_show_all->Check(true);
        return;
    }
    wxString strSql = wxT(" operator_id = '") + gr_para.login_user + wxT("' and is_active = true and (action_id = 'AT00000002' OR action_id ='AT00000025' OR action_id='AT00000026') ");
    set_clause(strSql);
    refresh_list();
    mi_show_all->Check(true);
    mi_show_author->Check(false);
    mi_check->Check(false);
    mi_review->Check(false);
}

void project_review_author_panel::Onmi_show_authorSelected(wxCommandEvent& event)
{
    if (!event.IsChecked())
    {
        mi_show_author->Check(true);
        return;
    }
    wxString strSql = wxT(" operator_id = '") + gr_para.login_user + wxT("' and is_active = true and action_id = 'AT00000002' ");
    set_clause(strSql);
    refresh_list();
    mi_show_all->Check(false);
    mi_show_author->Check(true);
    mi_check->Check(false);
    mi_review->Check(false);
}

void project_review_author_panel::Onmi_reviewSelected(wxCommandEvent& event)
{
    if (!event.IsChecked())
    {
        mi_review->Check(true);
        return;
    }
    wxString strSql = wxT(" operator_id = '") + gr_para.login_user + wxT("' and is_active = true and action_id ='AT00000025' ");
    set_clause(strSql);
    refresh_list();
    mi_show_all->Check(false);
    mi_show_author->Check(false);
    mi_check->Check(false);
    mi_review->Check(true);
}

void project_review_author_panel::Onmi_checkSelected(wxCommandEvent& event)
{
    if (!event.IsChecked())
    {
        mi_check->Check(true);
        return;
    }
    wxString strSql = wxT(" operator_id = '") + gr_para.login_user + wxT("' and is_active = true and  action_id='AT00000026' ");
    set_clause(strSql);
    refresh_list();
    mi_show_all->Check(false);
    mi_show_author->Check(false);
    mi_check->Check(true);
    mi_review->Check(false);
}

void project_review_author_panel::Onmi_no_checkSelected(wxCommandEvent& event)
{
    if (!gr_para.login_status)
    {
        wxLogMessage(_("尚未登陆,无法做任何操作!"));
        return;
    }
    if (!wxGetApp().conn->IsAlive())
    {
        wxLogMessage(_("系统连接已断开,请重新连接!"));
        wxGetApp().clear_login();
        return;
    }


    long l_item = -1;
    l_item = lv_person->GetNextItem(l_item,  wxLIST_NEXT_ALL,  wxLIST_STATE_SELECTED);

    if(l_item == -1)
    {
        wxLogMessage(_("请选择操作人员！"));
        return;
    }

    wxString s_engineer = lv_person->GetItemText(l_item,0);

    wxString s_name = lv_person->GetItemText(l_item, 1);

    wxString s_status = lv_person->GetItemText(l_item, 3);;

    if(s_status==wxT("Y"))
    {
        wxLogMessage(_("本身就是免审，无需设置!"));
        return;
    }


    wxString str_sql = wxT("UPDATE s_group_member SET no_check =true ,modify_date = '")+DateToAnsiStr(wxDateTime::Now())+wxT("',modify_emp_id = '")+
                    gr_para.login_user+wxT("' WHERE employee_id ='")+s_engineer+wxT("' and group_id='G0002';");

    if(wxGetApp().app_sql_update(str_sql))
    {
        wxLogMessage(_("评审工程师:")+s_name+_("已经成功设置成免审!"));
    }

    refresh_res_list();
}

void project_review_author_panel::Onmi_cancel_no_checkSelected(wxCommandEvent& event)
{
    if (!gr_para.login_status)
    {
        wxLogMessage(_("尚未登陆,无法做任何操作!"));
        return;
    }
    if (!wxGetApp().conn->IsAlive())
    {
        wxLogMessage(_("系统连接已断开,请重新连接!"));
        wxGetApp().clear_login();
        return;
    }


    long l_item = -1;
    l_item = lv_person->GetNextItem(l_item,  wxLIST_NEXT_ALL,  wxLIST_STATE_SELECTED);

    if(l_item == -1)
    {
        wxLogMessage(_("请选择操作人员！"));
        return;
    }

    wxString s_engineer = lv_person->GetItemText(l_item,0);

    wxString s_name = lv_person->GetItemText(l_item, 1);

    wxString s_status = lv_person->GetItemText(l_item, 3);;

    if(s_status.IsEmpty())
    {
        wxLogMessage(_("本身就是非免审，无需取消!"));
        return;
    }


    if(s_engineer == gr_para.login_user)
    {
        wxLogMessage(_("评审负责人无法取消免审!"));
        return;
    }


    wxString str_sql = wxT("UPDATE s_group_member SET no_check =false ,modify_date = '")+DateToAnsiStr(wxDateTime::Now())+wxT("',modify_emp_id = '")+
                    gr_para.login_user+wxT("' WHERE employee_id ='")+s_engineer+wxT("' and group_id='G0002';");

    if(wxGetApp().app_sql_update(str_sql))
    {
        wxLogMessage(_("评审工程师:")+s_name+_("已经成功取消免审!"));
    }

    refresh_res_list();
}

void project_review_author_panel::Onmi_filterSelected(wxCommandEvent& event)
{
}

void project_review_author_panel::Onlv_personItemActivated(wxListEvent& event)
{
    if (!gr_para.login_status)
    {
        wxLogMessage(_("尚未登陆,无法做任何操作!"));
        return;
    }
    if (!wxGetApp().conn->IsAlive())
    {
        wxLogMessage(_("系统连接已断开,请重新连接!"));
        wxGetApp().clear_login();
        return;
    }
    wxListItem li_item = event.GetItem();
    li_item.m_col = 0;
    wxString s_engineer = li_item.GetText();
    wxString str = wxT(" is_active = true and action_id = 'AT00000025' and operator_id ='") + s_engineer + wxT("' ");
    set_group_clause(str);
    refresh_group_list();
}

void project_review_author_panel::Onbutton_groupClick(wxCommandEvent& event)
{
    if (!gr_para.login_status)
    {
        wxLogMessage(_("尚未登陆,无法做任何操作!"));
        return;
    }
    if (!wxGetApp().conn->IsAlive())
    {
        wxLogMessage(_("系统连接已断开,请重新连接!"));
        wxGetApp().clear_login();
        return;
    }
    wxString str = wxT(" is_active = true and (action_id = 'AT00000025' or action_id = 'AT00000026') ");
    set_group_clause(str);
    refresh_group_list();
}

void project_review_author_panel::OnButton_FeedbackClick(wxCommandEvent& event)
{
}
